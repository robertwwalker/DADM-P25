{
  "hash": "553318f12499f9923ac3a2c602558977",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Gemini for Data on Hunger\"\nauthor: \"Robert W. Walker\"\ndate: \"2025-09-25\"\nformat: \n   html:\n     theme: superhero\n     embed-resources: true\n     lightbox: true\n---\n\n## Gemini from Willamette\n\n\n::: {.callout-note}\n## RWW\n\nCan you provide R code to acquire data from a reputable source about cross-national food insecurity, famine likelihood, and related starvation and malnutrition risk for countries? I want to map these data so I will need a standard three letter identifier like the world bank's iso_3c to join to a map.\n:::\n\n\n::: {.callout-tip collapse=\"true\"}\n## Gemini responds\n\n\nIt's great that you're looking for highly relevant and map-ready data! The best and most reputable source for cross-national food insecurity and related data that consistently uses ISO 3-letter country codes (iso3c) is the World Bank, which you can access directly in R using the wbstats package.\n\nThe World Bank hosts several indicators covering malnutrition and hunger. For famine risk, the best public data is often provided by the Integrated Food Security Phase Classification (IPC), which you would need to download separately.\n\nHere is the R code to acquire, clean, and prepare this data for mapping.\n\n1. World Bank Data (Malnutrition & Food Access) üåê\nThe World Bank provides reliable, standardized annual data on key indicators related to malnutrition and food access. The wbstats package automatically uses the iso3c identifier, which is perfect for joining to map files.\n\n### R Code\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Install packages if you haven't already\n# install.packages(c(\"wbstats\", \"dplyr\", \"countrycode\", \"tidyr\"))\n\nlibrary(wbstats)\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'dplyr'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(countrycode)\nlibrary(tidyr)\n\n# --- Define the World Bank Indicators ---\n# Key indicators related to food insecurity and malnutrition\nfood_indicators <- c(\n  # Malnutrition/Starvation Risk\n  stunting = \"SH.STA.STNT.ZS\",      # Prevalence of stunting, height-for-age (% of children under 5)\n  wasting = \"SH.STA.WAST.ZS\",       # Prevalence of wasting, weight-for-height (% of children under 5)\n  underweight = \"SH.STA.OWGH.ZS\",   # Prevalence of underweight, weight-for-age (% of children under 5)\n  \n  # Food Insecurity/Access\n  undernourishment = \"SN.ITK.DEFC.ZS\", # Prevalence of undernourishment (% of population)\n  food_exports = \"TX.VAL.FOOD.CD.ZS\" # Food exports (% of merchandise exports)\n)\n\n# --- Download the Data ---\ncat(\"Downloading World Bank food security data...\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nDownloading World Bank food security data...\n```\n\n\n:::\n\n```{.r .cell-code}\n# Use 'countries_only' to filter out regional aggregates (like 'Arab World', 'EU', etc.)\nwb_data_raw <- wb_data(\n  indicator = food_indicators,\n  country = \"countries_only\",\n  start_date = 2018, # Get data from 2018 onwards\n  end_date = 2024    # Up to the latest available year\n)\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError: World Bank API request failed for indicator TX.VAL.FOOD.CD.ZS The following message was returned from the server\nid: 120\nkey: Invalid value\nvalue: The provided parameter value is not valid\n\nfailed request:\nhttps://api.worldbank.org/v2/en/country/all/indicator/TX.VAL.FOOD.CD.ZS?date=2018%3A2024&footnote=y&cntrycode=y&per_page=20000&format=json\n```\n\n\n:::\n\n```{.r .cell-code}\n# --- Clean and Prepare for Mapping ---\nwb_data_clean <- wb_data_raw %>%\n  # Select key columns: iso3c is the join key\n  select(iso3c, country, date, stunting, wasting, undernourishment) %>%\n  \n  # Filter to keep only the latest observation for each country for mapping\n  # (This is crucial for a cross-sectional map)\n  group_by(iso3c) %>%\n  slice_max(order_by = date, n = 1, with_ties = FALSE) %>%\n  ungroup() %>%\n  \n# Rename the date to be more descriptive (the year of the observation)\n  rename(Data_Year = date) %>%\n  \n# Clean up country names and remove missing ISO codes\n  filter(!is.na(iso3c)) %>%\n  select(-country) # Remove the 'country' column to use the one from the dictionary later\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError: object 'wb_data_raw' not found\n```\n\n\n:::\n\n```{.r .cell-code}\ncat(\"World Bank data acquired and prepared. Latest available data:\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nWorld Bank data acquired and prepared. Latest available data:\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(head(wb_data_clean))\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError: object 'wb_data_clean' not found\n```\n\n\n:::\n\n```{.r .cell-code}\n# Save the final data frame\nwb_mapping_data <- wb_data_clean\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError: object 'wb_data_clean' not found\n```\n\n\n:::\n:::\n\n\n2. Integrated Food Security Phase Classification (IPC) Data (Famine Likelihood) üö®\nThe most authoritative source for assessing famine likelihood, acute food insecurity, and emergency risk is the IPC (Integrated Food Security Phase Classification) and its partners (FAO, WFP, etc.).\n\nThis data is often not in a single API but is compiled and shared via the Humanitarian Data Exchange (HDX). The simplest way to get the latest comprehensive file is to download the global IPC/CH (Cadre Harmonis√©) CSV file and load it.\n\n### R Code (IPC Famine Data)\n\nThe following code downloads the data directly from the HDX link (which contains an iso3 column) and extracts the key phases.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# --- Download the Latest IPC Data from HDX ---\n# This link points to the combined IPC and CH (Cadre Harmonis√©) classification data\nipc_url <- \"https://data.humdata.org/dataset/5091ff7d-1c39-4d69-a1b4-1064df195159/resource/201df499-4c2f-4888-8b20-d336940d96d9/download/ipc_ch_latest.csv\"\n\ncat(\"\\nDownloading IPC Famine Risk Data...\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nDownloading IPC Famine Risk Data...\n```\n\n\n:::\n\n```{.r .cell-code}\nipc_data_raw <- read.csv(ipc_url)\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in read.table(file = file, header = header, sep = sep, quote = quote, : no lines available in input\n```\n\n\n:::\n\n```{.r .cell-code}\n# --- Clean and Extract Famine Risk (IPC Phase) ---\nipc_mapping_data <- ipc_data_raw %>%\n  # Use the country code column 'iso3' which is the ISO 3-letter code\n  rename(iso3c = iso3) %>%\n  \n  # Focus on the most recent analysis date for each country\n  group_by(iso3c) %>%\n  slice_max(order_by = `Analysis.Date`, n = 1, with_ties = FALSE) %>%\n  ungroup() %>%\n  \n  # Select the relevant food insecurity phase columns\n  # IPC_Phase3_Plus = People in Crisis (Phase 3), Emergency (Phase 4), or Catastrophe/Famine (Phase 5)\n  select(\n    iso3c, \n    Analysis_Date = `Analysis.Date`,\n    Phase_3_Plus_Pop = `IPC_Phase3_Plus_Population`, # Population in Crisis/Emergency/Famine\n    Phase_5_Pop = `IPC_Phase5_Population`,           # Population in Catastrophe/Famine (highest risk)\n    Overall_Phase = `IPC_Most_Likely_Phase`          # The single highest IPC phase assigned\n  ) %>%\n  # Convert the Overall_Phase to a numeric value for easier mapping:\n  # 1=Minimal, 2=Stressed, 3=Crisis, 4=Emergency, 5=Famine\n  mutate(Overall_Phase_Numeric = as.numeric(gsub(\"Phase \", \"\", Overall_Phase))) %>%\n  filter(!is.na(iso3c))\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError: object 'ipc_data_raw' not found\n```\n\n\n:::\n\n```{.r .cell-code}\ncat(\"IPC Famine Risk data acquired and prepared.\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nIPC Famine Risk data acquired and prepared.\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(head(ipc_mapping_data))\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError: object 'ipc_mapping_data' not found\n```\n\n\n:::\n:::\n\n\n3. Final Merged Data Set for Mapping üó∫Ô∏è\nFinally, you can merge both datasets into one master file using the common iso3c code.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# --- Combine World Bank and IPC Data ---\nfinal_mapping_data <- full_join(wb_mapping_data, ipc_mapping_data, by = \"iso3c\")\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError: object 'wb_mapping_data' not found\n```\n\n\n:::\n\n```{.r .cell-code}\n# --- Add Country Names for Labeling ---\n# The 'countrycode' package is used here to get the full name from the ISO code\nfinal_mapping_data <- final_mapping_data %>%\n  mutate(\n    Country_Name = countrycode(iso3c, origin = 'iso3c', destination = 'country.name')\n  ) %>%\n  # Reorder columns for convenience\n  select(iso3c, Country_Name, everything())\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError: object 'final_mapping_data' not found\n```\n\n\n:::\n\n```{.r .cell-code}\ncat(\"\\n--- Final Mapping Data Structure ---\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n--- Final Mapping Data Structure ---\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(head(final_mapping_data))\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError: object 'final_mapping_data' not found\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(glimpse(final_mapping_data))\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError: object 'final_mapping_data' not found\n```\n\n\n:::\n:::\n\n\nThis final final_mapping_data data frame now contains all your requested indicators, uniquely identified by the World Bank's iso3c code, which you can use to join with any standard global shapefile (like those available from rnaturalearth or other mapping packages).\n:::\n\n## File Downloads\n\nThese are often the hardest parts to get right and this one was a frustrating mess.  The beauty is that it found the locations and the names and that significantly reduces the task to acquiring the file and importing it.  The search costs were absorbed by the LLM, so all is not lost.\n\n![IPC Map](img/IPCMap.png)\n\nUnfortunately, this file download problem wasn't something Gemini succeeded in resolving.  Fortunately, it supplied a URL and this got me to a very nice web presence achieving what I wanted to see.  [The IPC maps are here.](https://www.ipcinfo.org/ipc-country-analysis/ipc-mapping-tool/)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}